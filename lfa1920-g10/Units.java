import java.util.*;
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.*;

public class Units extends NewUnit {

  private static HashMap<String, HashMap<String, SymbolConv>> dimMap;
  private double value;
  private String unitName;

  public Units(String unitName, double value){
    super(unitName, value);
    this.value = value;
    this.unitName = unitName;
  }

  public static Units declUnit (Units u1){
    return new Units(u1.getUnitName(), u1.getValue());
  }

  public Boolean compareTo(Units u1, Units u2){
    if(!u1.result.unitName().equals(u2.result.unitName())){
      System.err.println("ERROR: Cant compare different units");
      return false;
    }else if(u1.result.value()==u2.result.value()){
      return true;
    }else{
      return false;
    }
  }

  public static void PrintUnit(Units u1){
    System.out.println( u1.result.value()+" "+u1.result.unitName());
  }

  public static Units Unitadd(Units u1, Units u2) throws IOException {
    HashMap<String, HashMap<String, SymbolConv>> dimMap = readDataBase();
    Units res;
    SymbolConv scu1 = verifyValueConv(u1, dimMap);
    SymbolConv scu2 = verifyValueConv(u2, dimMap);
    if(!scu1.unitName().equals(scu2.unitName()) || (scu1.unitName() == null && scu2.unitName() == null)) {
      System.err.println("ERROR: Cant add different units");
      System.exit(-1);
      return null;
    }else{
      scu1 = getValueConv(u1, dimMap);
      scu2 = getValueConv(u2, dimMap);
      res =  new Units(scu1.unitName(), 
      scu1.value()*u1.result.value()+scu2.value()*u2.result.value());
    }
    return res;
  }

  public static Units Unitsub(Units u1, Units u2) throws IOException {
    HashMap<String, HashMap<String, SymbolConv>> dimMap = readDataBase();
    Units res;
    SymbolConv scu1 = verifyValueConv(u1, dimMap);
    SymbolConv scu2 = verifyValueConv(u2, dimMap);
    if(!scu1.unitName().equals(scu2.unitName())){
      System.err.println("ERROR: Cant subtract different units");
      System.exit(-1);
      return null;
    }else{
      scu1 = getValueConv(u1, dimMap);
      scu2 = getValueConv(u2, dimMap);
      return new Units(u1.result.unitName(), u1.result.value()*scu1.value()-u2.result.value()*scu2.value());
    }
  }

  public static Units UnitMultiply(Units u1, Units u2){
    if(!u1.result.unitName().equals(u2.result.unitName())){  
      Double result = u1.result.value()*u2.result.value();
      String s = u1.result.unitName()+ ""+ u2.result.unitName();
      Units newU = new Units(s, result);
      return newU;
    }else{
      Double result = u1.result.value()*u2.result.value();
      Units newU = new Units(u1.result.unitName(), result);
      return newU;
    }
  }

  public static Units UnitConstMultiply(Units u1, double x){
    return new Units(u1.result.unitName(), u1.result.value()*x);
  }

  public static Units UnitConstDivide(Units u1, double x){
    return new Units(u1.result.unitName(), u1.result.value()*x);
  }

  public static Units UnitDivide(Units u1, Units u2){
    Double result= u1.result.value()/u2.result.value();
    String s = u1.result.unitName()+ "/"+ u2.result.unitName();
    Units newU = new Units(s, result);
    return newU;
  }

  public static void IncrementUnit(Units u1){
    u1.result.setValue(u1.result.value()+1);
  }

  public static void DecrementUnit(Units u1){
    u1.result.setValue(u1.result.value()-1);
  }

  private static SymbolConv verifyValueConv(Units u, HashMap<String, HashMap<String, SymbolConv>> dimMap){
    SymbolConv SISymbol = null;
    for(HashMap<String, SymbolConv> units : dimMap.values()){
      for(SymbolConv s : units.values()){
        // boolean a = s.unitName().equals(u.unitName);
        // System.out.println(s.unitName()+ " " + u.unitName);
        // System.out.println(a);
        if(s.unitName().equals(u.unitName)){
          for(SymbolConv sc : units.values()){
            if(sc.value()==1){
              SISymbol = sc;
            }
          }
        }
      }
    }
    return SISymbol;
  }

  private static SymbolConv getValueConv(Units u, HashMap<String, HashMap<String, SymbolConv>> dimMap){
    for(HashMap<String, SymbolConv> units : dimMap.values()){
      for(SymbolConv s : units.values()){
        if(s.unitName().equals(u.unitName)){
          return s;
        }
      }
    }
    return null;
  }

  public static void setHashMap(HashMap<String, HashMap<String, SymbolConv>> dimMap) throws IOException {
    String aux="";
    for (HashMap<String, SymbolConv> units : dimMap.values()){
      aux += getKey1(dimMap, units);
      aux += "\n";
      aux += units.toString();
      aux += "\n";
    }

    for (HashMap<String, SymbolConv> units : dimMap.values()){
        Files.write(Paths.get("dataBase.txt"), aux.getBytes(), StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
    }
  }

  private static <String, HashMap> String getKey1(Map<String, HashMap> map, HashMap value)  {
    for(Map.Entry<String, HashMap> entry : map.entrySet()) {
       if (entry.getValue().equals(value)) {
          return entry.getKey();
       }
    }  
    return null;
  }

  public static HashMap<String, HashMap<String, SymbolConv>> readDataBase() throws IOException{
    HashMap<String, HashMap<String, SymbolConv>> dimMap = new HashMap<>();

    List<String> lines = Files.readAllLines(Paths.get("dataBase.txt"));
    String aux="";

    for (String l : lines){
      aux+=l;
      aux+="\n";
    }

    String[] aux2 = aux.split("\n");
    String[] dim = new String [aux2.length/2];
    int j=0;

    for(int i=0; i<aux2.length; i=i+2){
      String a = aux2[i+1].substring(1, aux2[i+1].length()-1) +",";
      // System.out.println(a);
      dim[j] = aux2[i] + " " + a;
      String dimj = dim[j].replaceAll(" ", "@");
      String[] dim2 = dimj.split("@");
      String g="";
      

      for(int k=0; k<dim2.length ; k++){
        g += dim2[k];
        g += " ";
      }
      
      HashMap<String, SymbolConv> units = new HashMap<>();
      for(int k=1; k<dim2.length; k=k+4 ){
        // System.out.println(dim2[j]);
        String[] aux3 = dim2[k].split("=");
        // System.out.println("0: " + aux3[0]);
        // System.out.println("1:" + dim2[k+1] + "2: "+ dim2[k+3] );
        String d = dim2[k+1].substring(0, dim2[k+1].length()-1);
        String convS = dim2[k+3].substring(0, dim2[k+3].length()-1);
        double conv =Double.parseDouble(convS);
        SymbolConv sc = new SymbolConv(d, conv);
        units.put(aux3[0], sc);
       // System.out.println(units);
        dimMap.put(dim2[0], units);
      }
      
      j++;
    }
    return dimMap;
  }

}

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































